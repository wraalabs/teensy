#define LED 3
#include <Bounce.h>
#include "effect_trigger_stutter.h"



#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioInputI2S            i2s1;           //xy=326,300
AudioFilterBiquad        biquad1;        //xy=473,187
AudioEffectTriggerStutter        triggerstutter1;        //xy=524,298
AudioAnalyzeNoteFrequency notefreq1;      //xy=637,186
AudioOutputI2S           i2s2;           //xy=707,298
AudioConnection          patchCord1(i2s1, 0, triggerstutter1, 0);
AudioConnection          patchCord2(i2s1, 0, biquad1, 0);
AudioConnection          patchCord3(biquad1, notefreq1);
AudioConnection          patchCord4(triggerstutter1, 0, i2s2, 0);
AudioControlSGTL5000     sgtl5000_1;     //xy=879,530
// GUItool: end automatically generated code





Bounce footswitch = Bounce(0, 50);  // debounce the footswitch
Bounce D1 = Bounce(1, 50);          // debounce the toggle switch
Bounce D2 = Bounce(2, 50);          // "  "  "  "  "  "  "  "  "

// this section includes the function to check the toggle position
bool right;
bool middle;
bool left;
void checkToggle () {               // this is our function to check toggle position...
D1.update();  D2.update();          // check digital inputs connected to toggle (can delete I think)
if(digitalRead(1) && !digitalRead(2))   {right = 1; middle = 0; left = 0;}    // toggle is right
if(digitalRead(1) && digitalRead(2))  {right = 0; middle = 1; left = 0;}      // toggle is in the middle
if(!digitalRead(1) && digitalRead(2))   {right = 0; middle = 0; left = 1;}    // toggle is left
}

// tap tempo variables
unsigned long lfoCount = millis();        // LFO period counter
uint16_t tapStart = millis();             // tap period counter
unsigned long tapLength = 1000;           // tap period in milliseconds, can be used to set delays etc

// TV remote variables
#define SAMPLES_IN_BUFFER 160000
uint32_t delay_max = SAMPLES_IN_BUFFER; // number of samples 
uint16_t delay_line[SAMPLES_IN_BUFFER] = {};
bool reverse;

// stuttr variables
unsigned int glitchtime = 300;
byte division = 4;
float note;
bool firststutter = 0;


// glitch functions / variables
void fadeout();
void fadein();

unsigned int fadetime = 50;
unsigned long currentMillis = millis();
bool whichfade = 0;   // 0 is fade in fade1, fade out 2 
bool latchstate = 0;  // the state of the footswitch in latching mode. 0 = off, 1 = on
bool canglitch = 0;

// clock function
extern "C" uint32_t set_arm_clock(uint32_t frequency);

void setup() {
 
  AudioMemory(40); // the "40" represents how much internal memory (in the Teensy, not the external RAM chip) is allotted for audio recording. It is measured in sample blocks, each providing 2.9ms of audio.
  sgtl5000_1.enable();    // this turns on the SGTL5000, which is the audio codec on the audio board
  sgtl5000_1.volume(1);   // this sets the output volume (it can be between 0 and 1)
  sgtl5000_1.inputSelect(AUDIO_INPUT_LINEIN); // selects the audio input, we always use Line In
  analogReadResolution(12); // configure the pots to give 12 bit readings
  pinMode(0, INPUT_PULLUP); // internal pull-up resistor for footswitch
  pinMode(1, INPUT_PULLUP); // internal pull-up resistor for toggle
  pinMode(2, INPUT_PULLUP); // internal pull-up resistor for toggle
  pinMode(3, OUTPUT);       // pin 3 (the LED) is an output;
  Serial.begin(9600);       // initiate the serial monitor. USB is always 12 Mbit/sec

  sgtl5000_1.adcHighPassFilterDisable();
  sgtl5000_1.audioPostProcessorEnable();
  sgtl5000_1.audioPreProcessorEnable();
  sgtl5000_1.autoVolumeEnable();
  analogReadAveraging(32);  

  // initialise stutter effect with delay buffer
  triggerstutter1.begin(delay_line, delay_max);

  // initialise note detector 
  notefreq1.begin(.5);
  
  // pre-note-freq reverb filter 
  biquad1.setLowpass(0, 700, 0.2);
  biquad1.setLowpass(1, 1000, 0.7);
  

  

}

void loop() {

/*  if(millis() - currentMillis >= tapLength)              
  {
    digitalWrite(LED, HIGH);
    triggerstutter1.stutter(glitchtime / division, division);

    firststutter = 1;
    currentMillis = millis();                                 // reset counter 
  } 

  if(millis() - currentMillis >= 25) 
  {
    digitalWrite(LED, LOW);
  }
 */ 
  if (notefreq1.available() && firststutter && millis() - currentMillis >= 50)    
    {
      note = notefreq1.read();

      if(note <= 146) division = 2;
      else if(note <= 246) division = 4;
      else division = 8;

      firststutter = 0;
      triggerstutter1.updatestutter(tapLength / division, division);
    }

    else if (notefreq1.available() && !firststutter)    
    {
      note = notefreq1.read();
      if(note <= 146) division = 2;
      else if(note <= 246) division = 4;
      else division = 8;
    }  


  // make division pot
  // glitchtime = analogRead(A0) + 400;
      


  // tap tempo code
  footswitch.update();
  if(footswitch.fallingEdge())                          // tap pressed
  {
    if(millis() - tapStart <= 3000)
    {
      tapLength = millis() - tapStart;
    }
    tapStart = millis();
    digitalWrite(LED, HIGH);
    lfoCount = millis();
  }
  else if(millis() - lfoCount >= tapLength)             // LFO period concluded
  {
    digitalWrite(LED, HIGH);
    triggerstutter1.stutter(glitchtime / division, division);
    firststutter = 1;
    lfoCount = millis();
  }
  if(millis() - lfoCount >= 25)                         // turn off LED  
  {
    digitalWrite(LED, LOW);
  }

  
}



/*

// glitch functions
void fadeout ()
{
  if(whichfade == 0) {fade2.fadeOut(fadetime);  }
  if(whichfade == 1) {fade1.fadeOut(fadetime);  } 
}

void fadein ()
{
  if(whichfade == 0) {fade1.fadeIn(fadetime); } 
  if(whichfade == 1) {fade2.fadeIn(fadetime); }     // fade in tv remote effect
}
*/
